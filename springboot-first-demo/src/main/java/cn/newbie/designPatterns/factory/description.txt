定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类中。

按照实际业务场景区分，分为：简单工厂模式（静态工厂方法模式）、工厂方法模式、抽象工厂模式。


简单工厂模式：
    优点：
        工厂类包含必要的逻辑判断，可以决定在什么时候创建哪一个产品的实例。
        客户端无需知道所创建具体产品的类名，只需知道参数即可。
    缺点：
        简单工厂模式的工厂类单一，负责所有产品的创建，职责过重，一旦异常，整个系统将受到影响。且工厂类代码会非常臃肿，违背高聚合原则。
        系统扩展困难，一旦增加新产品不得不修改工厂逻辑，在产品类型较多时，可能造成逻辑过于复杂。

工厂方法：
    优点：
        用户只需知道产品工厂名即可以得到需要的产品实例，无需知道产品具体创建过程。
        灵活性增强，对于新产品的创建，只需增加一个相应工厂类即可。
        典型的解耦框架，高层模块只需知道产品的抽象类，无需关心其他类，满则迪米特法则、依赖倒置原则、里氏替换原则。
    缺点：
        类的个数容易过多，增加复杂度。
        增加系统的抽象性和理解难度。
        抽象产品只能生产一种产品（可通过抽象工厂模式解决）

抽象工厂模式：
    提供一个创建一系列相关或相互依赖的接口，而无需指定它们具体的类。

    当增加一个新的产品族时，只需要增加一个新的具体工厂，无需修改其他代码。

    当产品族增加新产品时，所有的工厂类都需要修改。